syntax = "proto3";

package protobuf;

option go_package = "github.com/Jitria/SentryFlow/protobuf";

message ClientInfo {
  string hostName = 1;
  string IPAddress = 2;
}

message APILog {
  uint64 id = 1;
  string timeStamp = 2;

  string srcNamespace = 11;
  string srcName = 12;
  map<string, string> srcLabel = 13;

  string srcType = 21;
  string srcIP = 22;
  string srcPort = 23;

  string dstNamespace = 31;
  string dstName = 32;
  map<string, string> dstLabel = 33;

  string dstType = 41;
  string dstIP = 42;
  string dstPort = 43;

  string protocol = 51;
  string method = 52;
  string path = 53;
  int32 responseCode = 54;
}

message MetricValue {
  map<string, string> value = 1;
}

message EnvoyMetrics {
  string timeStamp = 1;
  
  string namespace = 11;
  string name = 12;
  string IPAddress = 13;
  map<string, string> labels = 14;

  map<string, MetricValue> metrics = 21;
}

message Response {
    int32 msg = 1;
}

message Deploy {
  string cluster = 1;
  string namespace = 2;
  string name = 3;
  int32 desiredReplicas = 4;
  int32 availableReplicas = 5;
  map<string, string> labels = 6;
  string creationTimestamp = 7;
}

message Pod {
  string cluster = 1;
  string namespace = 2;
  string name = 3;
  string nodeName = 4;
  string podIP = 5;
  string status = 6;
  map<string, string> labels = 7;
  string creationTimestamp = 8;
}

message Service {
  string cluster = 1;
  string namespace = 2;
  string name = 3;
  string type = 4;
  string clusterIP = 5;
  repeated Port ports = 6;
  map<string, string> labels = 7;
}

message Port {
  int32 port = 1;
  int32 targetPort = 2;
  string protocol = 3;
}

//////////////
// Function //
//////////////

service SentryFlow {
  // operator -> client
  rpc GetAPILog(ClientInfo) returns (stream APILog);
  rpc GetEnvoyMetrics(ClientInfo) returns (stream EnvoyMetrics);

  rpc GetDeploy(ClientInfo) returns (stream Deploy);
  rpc GetPod(ClientInfo) returns (stream Pod);
  rpc GetService(ClientInfo) returns (stream Service);

  // agent -> operator
  rpc GiveAPILog(stream APILog) returns (Response);
  rpc GiveEnvoyMetrics(stream EnvoyMetrics) returns (Response);

  rpc AddDeployEvent(Deploy) returns (Response);
  rpc UpdateDeployEvent(Deploy) returns (Response);
  rpc DeleteDeployEvent(Deploy) returns (Response);

  rpc AddPodEvent(Pod) returns (Response);
  rpc UpdatePodEvent(Pod) returns (Response);
  rpc DeletePodEvent(Pod) returns (Response);
  
  rpc AddSvcEvent(Service) returns (Response);
  rpc UpdateSvcEvent(Service) returns (Response);
  rpc DeleteSvcEvent(Service) returns (Response);
}
