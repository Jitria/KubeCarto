// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sentryflow_metrics.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClassificationClient is the client API for APIClassification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClassificationClient interface {
	ClassifyAPIs(ctx context.Context, opts ...grpc.CallOption) (APIClassification_ClassifyAPIsClient, error)
}

type aPIClassificationClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClassificationClient(cc grpc.ClientConnInterface) APIClassificationClient {
	return &aPIClassificationClient{cc}
}

func (c *aPIClassificationClient) ClassifyAPIs(ctx context.Context, opts ...grpc.CallOption) (APIClassification_ClassifyAPIsClient, error) {
	stream, err := c.cc.NewStream(ctx, &APIClassification_ServiceDesc.Streams[0], "/protobuf.APIClassification/ClassifyAPIs", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIClassificationClassifyAPIsClient{stream}
	return x, nil
}

type APIClassification_ClassifyAPIsClient interface {
	Send(*APIClassificationRequest) error
	Recv() (*APIClassificationResponse, error)
	grpc.ClientStream
}

type aPIClassificationClassifyAPIsClient struct {
	grpc.ClientStream
}

func (x *aPIClassificationClassifyAPIsClient) Send(m *APIClassificationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIClassificationClassifyAPIsClient) Recv() (*APIClassificationResponse, error) {
	m := new(APIClassificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIClassificationServer is the server API for APIClassification service.
// All implementations should embed UnimplementedAPIClassificationServer
// for forward compatibility
type APIClassificationServer interface {
	ClassifyAPIs(APIClassification_ClassifyAPIsServer) error
}

// UnimplementedAPIClassificationServer should be embedded to have forward compatible implementations.
type UnimplementedAPIClassificationServer struct {
}

func (UnimplementedAPIClassificationServer) ClassifyAPIs(APIClassification_ClassifyAPIsServer) error {
	return status.Errorf(codes.Unimplemented, "method ClassifyAPIs not implemented")
}

// UnsafeAPIClassificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIClassificationServer will
// result in compilation errors.
type UnsafeAPIClassificationServer interface {
	mustEmbedUnimplementedAPIClassificationServer()
}

func RegisterAPIClassificationServer(s grpc.ServiceRegistrar, srv APIClassificationServer) {
	s.RegisterService(&APIClassification_ServiceDesc, srv)
}

func _APIClassification_ClassifyAPIs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIClassificationServer).ClassifyAPIs(&aPIClassificationClassifyAPIsServer{stream})
}

type APIClassification_ClassifyAPIsServer interface {
	Send(*APIClassificationResponse) error
	Recv() (*APIClassificationRequest, error)
	grpc.ServerStream
}

type aPIClassificationClassifyAPIsServer struct {
	grpc.ServerStream
}

func (x *aPIClassificationClassifyAPIsServer) Send(m *APIClassificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIClassificationClassifyAPIsServer) Recv() (*APIClassificationRequest, error) {
	m := new(APIClassificationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIClassification_ServiceDesc is the grpc.ServiceDesc for APIClassification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIClassification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.APIClassification",
	HandlerType: (*APIClassificationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClassifyAPIs",
			Handler:       _APIClassification_ClassifyAPIs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sentryflow_metrics.proto",
}
