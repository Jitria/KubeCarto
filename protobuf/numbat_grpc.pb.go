// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0--rc2
// source: numbat.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumbatClient is the client API for Numbat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumbatClient interface {
	GetData(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (Numbat_GetDataClient, error)
}

type numbatClient struct {
	cc grpc.ClientConnInterface
}

func NewNumbatClient(cc grpc.ClientConnInterface) NumbatClient {
	return &numbatClient{cc}
}

func (c *numbatClient) GetData(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (Numbat_GetDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Numbat_ServiceDesc.Streams[0], "/protobuf.Numbat/GetData", opts...)
	if err != nil {
		return nil, err
	}
	x := &numbatGetDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Numbat_GetDataClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type numbatGetDataClient struct {
	grpc.ClientStream
}

func (x *numbatGetDataClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumbatServer is the server API for Numbat service.
// All implementations must embed UnimplementedNumbatServer
// for forward compatibility
type NumbatServer interface {
	GetData(*ClientInfo, Numbat_GetDataServer) error
	mustEmbedUnimplementedNumbatServer()
}

// UnimplementedNumbatServer must be embedded to have forward compatible implementations.
type UnimplementedNumbatServer struct {
}

func (UnimplementedNumbatServer) GetData(*ClientInfo, Numbat_GetDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedNumbatServer) mustEmbedUnimplementedNumbatServer() {}

// UnsafeNumbatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumbatServer will
// result in compilation errors.
type UnsafeNumbatServer interface {
	mustEmbedUnimplementedNumbatServer()
}

func RegisterNumbatServer(s grpc.ServiceRegistrar, srv NumbatServer) {
	s.RegisterService(&Numbat_ServiceDesc, srv)
}

func _Numbat_GetData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NumbatServer).GetData(m, &numbatGetDataServer{stream})
}

type Numbat_GetDataServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type numbatGetDataServer struct {
	grpc.ServerStream
}

func (x *numbatGetDataServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

// Numbat_ServiceDesc is the grpc.ServiceDesc for Numbat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Numbat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Numbat",
	HandlerType: (*NumbatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetData",
			Handler:       _Numbat_GetData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "numbat.proto",
}
