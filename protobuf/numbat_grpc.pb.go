// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: numbat.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumbatClient is the client API for Numbat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumbatClient interface {
	GetLog(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (Numbat_GetLogClient, error)
	GetAPIMetrics(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*APIMetric, error)
}

type numbatClient struct {
	cc grpc.ClientConnInterface
}

func NewNumbatClient(cc grpc.ClientConnInterface) NumbatClient {
	return &numbatClient{cc}
}

func (c *numbatClient) GetLog(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (Numbat_GetLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Numbat_ServiceDesc.Streams[0], "/protobuf.Numbat/GetLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &numbatGetLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Numbat_GetLogClient interface {
	Recv() (*Log, error)
	grpc.ClientStream
}

type numbatGetLogClient struct {
	grpc.ClientStream
}

func (x *numbatGetLogClient) Recv() (*Log, error) {
	m := new(Log)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *numbatClient) GetAPIMetrics(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*APIMetric, error) {
	out := new(APIMetric)
	err := c.cc.Invoke(ctx, "/protobuf.Numbat/GetAPIMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumbatServer is the server API for Numbat service.
// All implementations must embed UnimplementedNumbatServer
// for forward compatibility
type NumbatServer interface {
	GetLog(*ClientInfo, Numbat_GetLogServer) error
	GetAPIMetrics(context.Context, *ClientInfo) (*APIMetric, error)
	mustEmbedUnimplementedNumbatServer()
}

// UnimplementedNumbatServer must be embedded to have forward compatible implementations.
type UnimplementedNumbatServer struct {
}

func (UnimplementedNumbatServer) GetLog(*ClientInfo, Numbat_GetLogServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (UnimplementedNumbatServer) GetAPIMetrics(context.Context, *ClientInfo) (*APIMetric, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIMetrics not implemented")
}
func (UnimplementedNumbatServer) mustEmbedUnimplementedNumbatServer() {}

// UnsafeNumbatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumbatServer will
// result in compilation errors.
type UnsafeNumbatServer interface {
	mustEmbedUnimplementedNumbatServer()
}

func RegisterNumbatServer(s grpc.ServiceRegistrar, srv NumbatServer) {
	s.RegisterService(&Numbat_ServiceDesc, srv)
}

func _Numbat_GetLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NumbatServer).GetLog(m, &numbatGetLogServer{stream})
}

type Numbat_GetLogServer interface {
	Send(*Log) error
	grpc.ServerStream
}

type numbatGetLogServer struct {
	grpc.ServerStream
}

func (x *numbatGetLogServer) Send(m *Log) error {
	return x.ServerStream.SendMsg(m)
}

func _Numbat_GetAPIMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumbatServer).GetAPIMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Numbat/GetAPIMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumbatServer).GetAPIMetrics(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Numbat_ServiceDesc is the grpc.ServiceDesc for Numbat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Numbat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Numbat",
	HandlerType: (*NumbatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPIMetrics",
			Handler:    _Numbat_GetAPIMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLog",
			Handler:       _Numbat_GetLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "numbat.proto",
}
