// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: numbat.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Logs_Send_FullMethodName = "/protobuf.Logs/Send"
)

// LogsClient is the client API for Logs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogsClient interface {
	Send(ctx context.Context, in *Log, opts ...grpc.CallOption) (*LogResponse, error)
}

type logsClient struct {
	cc grpc.ClientConnInterface
}

func NewLogsClient(cc grpc.ClientConnInterface) LogsClient {
	return &logsClient{cc}
}

func (c *logsClient) Send(ctx context.Context, in *Log, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, Logs_Send_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogsServer is the server API for Logs service.
// All implementations should embed UnimplementedLogsServer
// for forward compatibility
type LogsServer interface {
	Send(context.Context, *Log) (*LogResponse, error)
}

// UnimplementedLogsServer should be embedded to have forward compatible implementations.
type UnimplementedLogsServer struct {
}

func (UnimplementedLogsServer) Send(context.Context, *Log) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

// UnsafeLogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogsServer will
// result in compilation errors.
type UnsafeLogsServer interface {
	mustEmbedUnimplementedLogsServer()
}

func RegisterLogsServer(s grpc.ServiceRegistrar, srv LogsServer) {
	s.RegisterService(&Logs_ServiceDesc, srv)
}

func _Logs_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logs_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServer).Send(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

// Logs_ServiceDesc is the grpc.ServiceDesc for Logs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Logs",
	HandlerType: (*LogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Logs_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "numbat.proto",
}
